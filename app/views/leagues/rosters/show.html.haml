- unless @roster.approved?
  .alert.alert-warning
    - if user_can_edit_league?
      = link_to 'Approve', review_league_roster_path(@league, @roster),
                           class: 'btn btn-success pull-right'
      = button_to 'Decline', league_roster_path(@league, @roster),
          method: :delete, class: 'btn btn-danger pull-right',
          data: { confirm: "Are you sure you want to decline this team's sign up?" }

    %span.glyphicon.glyphicon-warning-sign
    Roster is awaiting approval

- if user_can_edit_roster?
  = link_to edit_league_roster_path(@league, @roster), class: 'btn btn-default pull-right' do
    Edit
    %span.glyphicon.glyphicon-cog

%h1
  = link_to @league, league_path(@league)
  - unless @league.signuppable?
    \: #{@roster.division}

%h2
  = @roster.name
  - if @roster.disbanded?
    %span.pull-right.label.label-danger Disbanded
Team #{link_to @roster.team, team_path(@roster.team)}
signed up on #{@roster.created_at.strftime('%c')}

%p

.panel.panel-default
  .panel-heading Info
  .panel-body= markdown @roster.description

.panel.panel-default
  .panel-heading
    Roster
    - if user_can_manage_transfers?
      = link_to league_roster_transfers_path(@league, @roster),
                class: 'btn btn-default pull-right' do
        Manage
  %ul.list-group
    - @roster.users.each do |user|
      %li.list-group-item
        = render 'users/listing', user: user, team: @roster.team

.panel.panel-default
  .panel-heading Transfers
  %ul.list-group
    - @roster.transfers.each do |transfer|
      %li.list-group-item
        = present(transfer.user).link
        - if transfer.is_joining?
          joined the team
        - else
          left the team
        on #{transfer.created_at.strftime('%c')}

.panel.panel-default
  .panel-heading Matches
  %ul.list-group
    - present_collection(@matches).each do |match|
      %li.list-group-item
        = match.link
        .pull-right= match.results

- if user_can_edit_league?
  .panel.panel-info
    .panel-heading Admin Comments
    %ul.list-group
      - @roster.comments.each do |comment|
        %li.list-group-item
          .panel.panel-default
            .panel-heading
              = render 'users/listing', user: comment.user
              .pull-right= comment.created_at.strftime('%c')

          = markdown comment.content

    .panel-body
      = render 'comment_form', league: @league, roster: @roster, comment: @comment
